// Autogenerated then massaged...
#include <Spatial/Spatial.h>
SPAffineTransform3D wrapSPAffineTransform3DConcatenation(SPAffineTransform3D t1, SPAffineTransform3D t2) {return SPAffineTransform3DConcatenation(t1, t2);}
SPAffineTransform3D wrapSPAffineTransform3DInverted(SPAffineTransform3D transform) {return SPAffineTransform3DInverted(transform);}
SPAffineTransform3D wrapSPAffineTransform3DMakeRotation(SPRotation3D rotation) {return SPAffineTransform3DMakeRotation(rotation);}
SPAffineTransform3D wrapSPAffineTransform3DMakeScale(SPSize3D scale) {return SPAffineTransform3DMakeScale(scale);}
//SPAffineTransform3D wrapSPAffineTransform3DMakeTranslation(SPSize3D translation) {return SPAffineTransform3DMakeTranslation(translation);}
SPAffineTransform3D wrapSPAffineTransform3DMakeTranslation(SPVector3D offset) {return SPAffineTransform3DMakeTranslation(offset);}
SPAffineTransform3D wrapSPAffineTransform3DMakeWith4x3Matrix(simd_double4x3 matrix) {return SPAffineTransform3DMakeWith4x3Matrix(matrix);}
SPAffineTransform3D wrapSPAffineTransform3DMakeWith4x4Matrix(simd_double4x4 matrix) {return SPAffineTransform3DMakeWith4x4Matrix(matrix);}
SPAffineTransform3D wrapSPAffineTransform3DMakeWithPose(SPPose3D pose) {return SPAffineTransform3DMakeWithPose(pose);}
//SPAffineTransform3D wrapSPAffineTransform3DMakeWithProjective(SPProjectiveTransform3D transform) {return SPAffineTransform3DMakeWithProjective(transform);}
SPAffineTransform3D wrapSPAffineTransform3DMakeWithScaledPose(SPScaledPose3D pose) {return SPAffineTransform3DMakeWithScaledPose(pose);}
SPAffineTransform3D wrapSPAffineTransform3DMakeWithTruncated4x4Matrix(simd_double4x4 matrix) {return SPAffineTransform3DMakeWithTruncated4x4Matrix(matrix);}
SPAffineTransform3D wrapSPAffineTransform3DMakeWithTruncatedProjective(SPProjectiveTransform3D transform) {return SPAffineTransform3DMakeWithTruncatedProjective(transform);}
SPAngle wrapSPAngleAcos(double x) {return SPAngleAcos(x);}
SPAngle wrapSPAngleAcosh(double x) {return SPAngleAcosh(x);}
SPAngle wrapSPAngleAsin(double x) {return SPAngleAsin(x);}
SPAngle wrapSPAngleAsinh(double x) {return SPAngleAsinh(x);}
SPAngle wrapSPAngleAtan(double x) {return SPAngleAtan(x);}
SPAngle wrapSPAngleAtan2(double y, double x) {return SPAngleAtan2(y, x);}
SPAngle wrapSPAngleAtanh(double x) {return SPAngleAtanh(x);}
SPAngle wrapSPAngleMakeWithDegrees(double degrees) {return SPAngleMakeWithDegrees(degrees);}
SPAngle wrapSPAngleMakeWithRadians(double radians) {return SPAngleMakeWithRadians(radians);}
SPAngle wrapSPAngleNegate(SPAngle angle) {return SPAngleNegate(angle);}
SPAngle wrapSPAngleNormalize(SPAngle angle) {return SPAngleNormalize(angle);}
SPAngle wrapSPRotation3DGetAngle(SPRotation3D rotation) {return SPRotation3DGetAngle(rotation);}
SPEulerAngles wrapSPRotation3DGetEulerAngles(SPRotation3D rotation, SPEulerAngleOrder order) {return SPRotation3DGetEulerAngles(rotation, order);}
SPPoint3D wrapSPPoint3DApplyAffineTransform(SPPoint3D point, SPAffineTransform3D transform) {return SPPoint3DApplyAffineTransform(point, transform);}
SPPoint3D wrapSPPoint3DApplyProjectiveTransform(SPPoint3D point, SPProjectiveTransform3D transform) {return SPPoint3DApplyProjectiveTransform(point, transform);}
SPPoint3D wrapSPPoint3DClampToRect(SPPoint3D point, SPRect3D rect) {return SPPoint3DClampToRect(point, rect);}
//SPPoint3D wrapSPPoint3DGetOrigin(SPPoint3D point) {return SPPoint3DGetOrigin(point);}
SPPoint3D wrapSPPoint3DMake(double x, double y, double z) {return SPPoint3DMake(x, y, z);}
SPPoint3D wrapSPPoint3DMakeWithSize(SPSize3D size) {return SPPoint3DMakeWithSize(size);}
SPPoint3D wrapSPPoint3DMakeWithSphericalCoordinates(SPSphericalCoordinates3D coords) {return SPPoint3DMakeWithSphericalCoordinates(coords);}
//SPPoint3D wrapSPPoint3DMakeWithVector(simd_double3 xyz) {return SPPoint3DMakeWithVector(xyz);}
SPPoint3D wrapSPPoint3DMakeWithVector(SPVector3D xyz) {return SPPoint3DMakeWithVector(xyz);}
SPPoint3D wrapSPPoint3DRotate(SPPoint3D point, SPRotation3D rotation) {return SPPoint3DRotate(point, rotation);}
SPPoint3D wrapSPPoint3DRotateAroundPoint(SPPoint3D point, SPRotation3D rotation, SPPoint3D pivot) {return SPPoint3DRotateAroundPoint(point, rotation, pivot);}
SPPoint3D wrapSPPoint3DRotateByQuaternion(SPPoint3D point, simd_quatd quaternion) {return SPPoint3DRotateByQuaternion(point, quaternion);}
SPPoint3D wrapSPPoint3DRotateByQuaternionAroundPoint(SPPoint3D point, simd_quatd quaternion, SPPoint3D pivot) {return SPPoint3DRotateByQuaternionAroundPoint(point, quaternion, pivot);}
//SPPoint3D wrapSPPoint3DTranslate(SPPoint3D point, SPSize3D offset) {return SPPoint3DTranslate(point, offset);}
SPPoint3D wrapSPPoint3DTranslate(SPPoint3D point, SPVector3D offset) {return SPPoint3DTranslate(point, offset);}
SPPoint3D wrapSPPoint3DUnapplyAffineTransform(SPPoint3D point, SPAffineTransform3D transform) {return SPPoint3DUnapplyAffineTransform(point, transform);}
SPPoint3D wrapSPPoint3DUnapplyProjectiveTransform(SPPoint3D point, SPProjectiveTransform3D transform) {return SPPoint3DUnapplyProjectiveTransform(point, transform);}
SPPoint3D wrapSPRect3DGetCenter(SPRect3D rect) {return SPRect3DGetCenter(rect);}
SPPoint3D wrapSPRect3DGetMaximum(SPRect3D rect) {return SPRect3DGetMaximum(rect);}
SPPoint3D wrapSPRect3DGetMinimum(SPRect3D rect) {return SPRect3DGetMinimum(rect);}
SPPose3D wrapSPPose3DConcatenation(SPPose3D lhs, SPPose3D rhs) {return SPPose3DConcatenation(lhs, rhs);}
SPPose3D wrapSPPose3DGetInverse(SPPose3D pose) {return SPPose3DGetInverse(pose);}
SPPose3D wrapSPPose3DMakeLookAt(SPVector3D forward, SPVector3D up) {return SPPose3DMakeLookAt(forward, up);}
SPPose3D wrapSPPose3DMakeWith4x4Matrix(simd_double4x4 matrix) {return SPPose3DMakeWith4x4Matrix(matrix);}
SPPose3D wrapSPPose3DMakeWithAffineTransform(SPAffineTransform3D transform) {return SPPose3DMakeWithAffineTransform(transform);}
SPPose3D wrapSPPose3DMakeWithProjectiveTransform(SPProjectiveTransform3D transform) {return SPPose3DMakeWithProjectiveTransform(transform);}
SPPose3D wrapSPPose3DRotate(SPPose3D pose, SPRotation3D rotation) {return SPPose3DRotate(pose, rotation);}
SPPose3D wrapSPPose3DRotateByQuaternion(SPPose3D pose, simd_quatd quaternion) {return SPPose3DRotateByQuaternion(pose, quaternion);}
//SPPose3D wrapSPPose3DTranslate(SPPose3D pose, SPSize3D offset) {return SPPose3DTranslate(pose, offset);}
SPPose3D wrapSPPose3DTranslate(SPPose3D pose, SPVector3D offset) {return SPPose3DTranslate(pose, offset);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DInverted(SPProjectiveTransform3D transform) {return SPProjectiveTransform3DInverted(transform);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DMakeRotation(SPRotation3D rotation) {return SPProjectiveTransform3DMakeRotation(rotation);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DMakeScale(SPSize3D scale) {return SPProjectiveTransform3DMakeScale(scale);}
//SPProjectiveTransform3D wrapSPProjectiveTransform3DMakeTranslation(SPSize3D translation) {return SPProjectiveTransform3DMakeTranslation(translation);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DMakeTranslation(SPVector3D offset) {return SPProjectiveTransform3DMakeTranslation(offset);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DMakeWith4x4Matrix(simd_double4x4 matrix) {return SPProjectiveTransform3DMakeWith4x4Matrix(matrix);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DMakeWithAffine(SPAffineTransform3D transform) {return SPProjectiveTransform3DMakeWithAffine(transform);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DMakeWithPose(SPPose3D pose) {return SPProjectiveTransform3DMakeWithPose(pose);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DMakeWithScaledPose(SPScaledPose3D pose) {return SPProjectiveTransform3DMakeWithScaledPose(pose);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DScaleBySize(SPProjectiveTransform3D transform, SPSize3D scale) {return SPProjectiveTransform3DScaleBySize(transform, scale);}
SPProjectiveTransform3D wrapSPProjectiveTransform3DScaleUniform(SPProjectiveTransform3D transform, double scale) {return SPProjectiveTransform3DScaleUniform(transform, scale);}
SPRay3D wrapSPRay3DRotate(SPRay3D ray, SPRotation3D rotation) {return SPRay3DRotate(ray, rotation);}
SPRay3D wrapSPRay3DRotateAroundPoint(SPRay3D ray, SPRotation3D rotation, SPPoint3D pivot) {return SPRay3DRotateAroundPoint(ray, rotation, pivot);}
SPRay3D wrapSPRay3DRotateByQuaternion(SPRay3D ray, simd_quatd quaternion) {return SPRay3DRotateByQuaternion(ray, quaternion);}
SPRay3D wrapSPRay3DRotateByQuaternionAroundPoint(SPRay3D ray, simd_quatd quaternion, SPPoint3D pivot) {return SPRay3DRotateByQuaternionAroundPoint(ray, quaternion, pivot);}
//SPRay3D wrapSPRay3DTranslate(SPRay3D ray, SPSize3D offset) {return SPRay3DTranslate(ray, offset);}
SPRay3D wrapSPRay3DTranslate(SPRay3D ray, SPVector3D offset) {return SPRay3DTranslate(ray, offset);}
SPRect3D wrapSPRect3DApplyAffineTransform(SPRect3D rect, SPAffineTransform3D transform) {return SPRect3DApplyAffineTransform(rect, transform);}
SPRect3D wrapSPRect3DApplyProjectiveTransform(SPRect3D rect, SPProjectiveTransform3D transform) {return SPRect3DApplyProjectiveTransform(rect, transform);}
SPRect3D wrapSPRect3DInset(SPRect3D rect, SPSize3D dXYZ) {return SPRect3DInset(rect, dXYZ);}
SPRect3D wrapSPRect3DIntegral(SPRect3D rect) {return SPRect3DIntegral(rect);}
SPRect3D wrapSPRect3DIntersection(SPRect3D rect, SPRect3D other) {return SPRect3DIntersection(rect, other);}
SPRect3D wrapSPRect3DMakeBoundingFromPoints(SPPoint3D points[], int pointCount) {return SPRect3DMakeBoundingFromPoints(points, pointCount);}
SPRect3D wrapSPRect3DRotate(SPRect3D rect, SPRotation3D rotation) {return SPRect3DRotate(rect, rotation);}
SPRect3D wrapSPRect3DRotateAroundPoint(SPRect3D rect, SPRotation3D rotation, SPPoint3D pivot) {return SPRect3DRotateAroundPoint(rect, rotation, pivot);}
SPRect3D wrapSPRect3DRotateByQuaternion(SPRect3D rect, simd_quatd quaternion) {return SPRect3DRotateByQuaternion(rect, quaternion);}
SPRect3D wrapSPRect3DRotateByQuaternionAroundPoint(SPRect3D rect, simd_quatd quaternion, SPPoint3D pivot) {return SPRect3DRotateByQuaternionAroundPoint(rect, quaternion, pivot);}
SPRect3D wrapSPRect3DScaleBy(SPRect3D rect, double x, double y, double z) {return SPRect3DScaleBy(rect, x, y, z);}
SPRect3D wrapSPRect3DScaleBySize(SPRect3D rect, SPSize3D scale) {return SPRect3DScaleBySize(rect, scale);}
SPRect3D wrapSPRect3DScaleUniform(SPRect3D rect, double scale) {return SPRect3DScaleUniform(rect, scale);}
SPRect3D wrapSPRect3DStandardize(SPRect3D rect) {return SPRect3DStandardize(rect);}
//SPRect3D wrapSPRect3DTranslate(SPRect3D rect, SPSize3D offset) {return SPRect3DTranslate(rect, offset);}
SPRect3D wrapSPRect3DTranslate(SPRect3D rect, SPVector3D offset) {return SPRect3DTranslate(rect, offset);}
SPRect3D wrapSPRect3DUnapplyAffineTransform(SPRect3D rect, SPAffineTransform3D transform) {return SPRect3DUnapplyAffineTransform(rect, transform);}
SPRect3D wrapSPRect3DUnapplyProjectiveTransform(SPRect3D rect, SPProjectiveTransform3D transform) {return SPRect3DUnapplyProjectiveTransform(rect, transform);}
SPRect3D wrapSPRect3DUnion(SPRect3D rect, SPRect3D other) {return SPRect3DUnion(rect, other);}
SPRotation3D wrapSPAffineTransform3DGetRotation(SPAffineTransform3D transform) {return SPAffineTransform3DGetRotation(transform);}
//SPRotation3D wrapSPPoint3DRotationToPoint(SPPoint3D point, SPPoint3D other) {return SPPoint3DRotationToPoint(point, other);}
SPRotation3D wrapSPProjectiveTransform3DGetRotation(SPProjectiveTransform3D transform) {return SPProjectiveTransform3DGetRotation(transform);}
//SPRotation3D wrapSPRect3DRotationToRect(SPRect3D rect, SPRect3D other) {return SPRect3DRotationToRect(rect, other);}
SPRotation3D wrapSPRotation3DInverse(SPRotation3D rotation) {return SPRotation3DInverse(rotation);}
SPRotation3D wrapSPRotation3DMake(SPAngle angle, SPRotationAxis3D axis) {return SPRotation3DMake(angle, axis);}
//SPRotation3D wrapSPRotation3DMake(SPRotationAxis3D axis, SPAngle angle) {return SPRotation3DMake(axis, angle);}
//SPRotation3D wrapSPRotation3DMakeLookAt(SPPoint3D position, SPPoint3D target, SPVector3D up) {return SPRotation3DMakeLookAt(position, target, up);}
//SPRotation3D wrapSPRotation3DMakeLookAt(SPPoint3D target, SPVector3D up) {return SPRotation3DMakeLookAt(target, up);}
SPRotation3D wrapSPRotation3DMakeLookAt(SPVector3D forward, SPVector3D up) {return SPRotation3DMakeLookAt(forward, up);}
SPRotation3D wrapSPRotation3DMakeWithEulerAngles(SPEulerAngles eulerAngles) {return SPRotation3DMakeWithEulerAngles(eulerAngles);}
SPRotation3D wrapSPRotation3DMakeWithQuaternion(simd_quatd quaternion) {return SPRotation3DMakeWithQuaternion(quaternion);}
SPRotation3D wrapSPRotation3DSlerp(SPRotation3D from, SPRotation3D to, double t) {return SPRotation3DSlerp(from, to, t);}
SPRotation3D wrapSPRotation3DSlerpLongest(SPRotation3D from, SPRotation3D to, double t) {return SPRotation3DSlerpLongest(from, to, t);}
SPRotation3D wrapSPRotation3DSpline(SPRotation3D r0, SPRotation3D r1, SPRotation3D r2, SPRotation3D r3, double t) {return SPRotation3DSpline(r0, r1, r2, r3, t);}
SPRotation3D wrapSPRotation3DSwing(SPRotation3D rotation, SPRotationAxis3D twistAxis) {return SPRotation3DSwing(rotation, twistAxis);}
SPRotation3D wrapSPRotation3DTwist(SPRotation3D rotation, SPRotationAxis3D twistAxis) {return SPRotation3DTwist(rotation, twistAxis);}
SPRotation3D wrapSPVector3DRotationToVector(SPVector3D vector, SPVector3D other) {return SPVector3DRotationToVector(vector, other);}
SPRotationAxis3D wrapSPRotation3DGetAxis(SPRotation3D rotation) {return SPRotation3DGetAxis(rotation);}
SPRotationAxis3D wrapSPRotationAxis3DMake(double x, double y, double z) {return SPRotationAxis3DMake(x, y, z);}
//SPRotationAxis3D wrapSPRotationAxis3DMakeWithVector(simd_double3 xyz) {return SPRotationAxis3DMakeWithVector(xyz);}
SPRotationAxis3D wrapSPRotationAxis3DMakeWithVector(SPVector3D xyz) {return SPRotationAxis3DMakeWithVector(xyz);}
//SPScaledPose3D wrapSPScaledPose3DConcatenation(SPPose3D lhs, SPScaledPose3D rhs) {return SPScaledPose3DConcatenation(lhs, rhs);}
//SPScaledPose3D wrapSPScaledPose3DConcatenation(SPScaledPose3D lhs, SPPose3D rhs) {return SPScaledPose3DConcatenation(lhs, rhs);}
SPScaledPose3D wrapSPScaledPose3DConcatenation(SPScaledPose3D lhs, SPScaledPose3D rhs) {return SPScaledPose3DConcatenation(lhs, rhs);}
SPScaledPose3D wrapSPScaledPose3DGetInverse(SPScaledPose3D scaledPose) {return SPScaledPose3DGetInverse(scaledPose);}
SPScaledPose3D wrapSPScaledPose3DMakeWith4x4Matrix(simd_double4x4 matrix) {return SPScaledPose3DMakeWith4x4Matrix(matrix);}
SPScaledPose3D wrapSPScaledPose3DMakeWithAffineTransform(SPAffineTransform3D transform) {return SPScaledPose3DMakeWithAffineTransform(transform);}
SPScaledPose3D wrapSPScaledPose3DMakeWithProjectiveTransform(SPProjectiveTransform3D transform) {return SPScaledPose3DMakeWithProjectiveTransform(transform);}
SPScaledPose3D wrapSPScaledPose3DRotate(SPScaledPose3D scaledPose, SPRotation3D rotation) {return SPScaledPose3DRotate(scaledPose, rotation);}
SPScaledPose3D wrapSPScaledPose3DRotateByQuaternion(SPScaledPose3D scaledPose, simd_quatd quaternion) {return SPScaledPose3DRotateByQuaternion(scaledPose, quaternion);}
SPScaledPose3D wrapSPScaledPose3DTranslate(SPScaledPose3D scaledPose, SPVector3D offset) {return SPScaledPose3DTranslate(scaledPose, offset);}
SPSize3D wrapSPAffineTransform3DGetScale(SPAffineTransform3D transform) {return SPAffineTransform3DGetScale(transform);}
SPSize3D wrapSPProjectiveTransform3DGetScale(SPProjectiveTransform3D transform) {return SPProjectiveTransform3DGetScale(transform);}
SPSize3D wrapSPSize3DApplyAffineTransform(SPSize3D size, SPAffineTransform3D transform) {return SPSize3DApplyAffineTransform(size, transform);}
SPSize3D wrapSPSize3DApplyProjectiveTransform(SPSize3D size, SPProjectiveTransform3D transform) {return SPSize3DApplyProjectiveTransform(size, transform);}
SPSize3D wrapSPSize3DIntersection(SPSize3D size, SPSize3D other) {return SPSize3DIntersection(size, other);}
SPSize3D wrapSPSize3DMake(double width, double height, double depth) {return SPSize3DMake(width, height, depth);}
SPSize3D wrapSPSize3DMakeWithPoint(SPPoint3D point) {return SPSize3DMakeWithPoint(point);}
//SPSize3D wrapSPSize3DMakeWithVector(simd_double3 xyz) {return SPSize3DMakeWithVector(xyz);}
SPSize3D wrapSPSize3DMakeWithVector(SPVector3D xyz) {return SPSize3DMakeWithVector(xyz);}
SPSize3D wrapSPSize3DRotate(SPSize3D size, SPRotation3D rotation) {return SPSize3DRotate(size, rotation);}
SPSize3D wrapSPSize3DRotateByQuaternion(SPSize3D size, simd_quatd quaternion) {return SPSize3DRotateByQuaternion(size, quaternion);}
SPSize3D wrapSPSize3DScaleBy(SPSize3D size, double x, double y, double z) {return SPSize3DScaleBy(size, x, y, z);}
SPSize3D wrapSPSize3DScaleBySize(SPSize3D size, SPSize3D scale) {return SPSize3DScaleBySize(size, scale);}
SPSize3D wrapSPSize3DScaleUniform(SPSize3D size, double scale) {return SPSize3DScaleUniform(size, scale);}
SPSize3D wrapSPSize3DUnapplyAffineTransform(SPSize3D size, SPAffineTransform3D transform) {return SPSize3DUnapplyAffineTransform(size, transform);}
SPSize3D wrapSPSize3DUnapplyProjectiveTransform(SPSize3D size, SPProjectiveTransform3D transform) {return SPSize3DUnapplyProjectiveTransform(size, transform);}
SPSize3D wrapSPSize3DUnion(SPSize3D size, SPSize3D other) {return SPSize3DUnion(size, other);}
SPSphericalCoordinates3D wrapSPSphericalCoordinates3DMake(double radius, SPAngle inclination, SPAngle azimuth) {return SPSphericalCoordinates3DMake(radius, inclination, azimuth);}
SPSphericalCoordinates3D wrapSPSphericalCoordinates3DMakeWithCartesianPoint(SPPoint3D xyz) {return SPSphericalCoordinates3DMakeWithCartesianPoint(xyz);}
//SPSphericalCoordinates3D wrapSPSphericalCoordinates3DMakeWithCartesianVector(simd_double3 xyz) {return SPSphericalCoordinates3DMakeWithCartesianVector(xyz);}
SPSphericalCoordinates3D wrapSPSphericalCoordinates3DMakeWithCartesianVector(SPVector3D xyz) {return SPSphericalCoordinates3DMakeWithCartesianVector(xyz);}
//SPVector3D wrapSPAffineTransform3DGetOffset(SPAffineTransform3D transform) {return SPAffineTransform3DGetOffset(transform);}
SPVector3D wrapSPAffineTransform3DGetTranslation(SPAffineTransform3D transform) {return SPAffineTransform3DGetTranslation(transform);}
//SPVector3D wrapSPProjectiveTransform3DGetOffset(SPProjectiveTransform3D transform) {return SPProjectiveTransform3DGetOffset(transform);}
SPVector3D wrapSPProjectiveTransform3DGetTranslation(SPProjectiveTransform3D transform) {return SPProjectiveTransform3DGetTranslation(transform);}
SPVector3D wrapSPVector3DCrossProduct(SPVector3D x, SPVector3D y) {return SPVector3DCrossProduct(x, y);}
SPVector3D wrapSPVector3DMake(double x, double y, double z) {return SPVector3DMake(x, y, z);}
SPVector3D wrapSPVector3DMakeWithPoint(SPPoint3D point) {return SPVector3DMakeWithPoint(point);}
SPVector3D wrapSPVector3DMakeWithRotationAxis(SPRotationAxis3D axis) {return SPVector3DMakeWithRotationAxis(axis);}
SPVector3D wrapSPVector3DMakeWithSize(SPSize3D size) {return SPVector3DMakeWithSize(size);}
SPVector3D wrapSPVector3DMakeWithSphericalCoordinates(SPSphericalCoordinates3D coords) {return SPVector3DMakeWithSphericalCoordinates(coords);}
SPVector3D wrapSPVector3DMakeWithVector(simd_double3 xyz) {return SPVector3DMakeWithVector(xyz);}
SPVector3D wrapSPVector3DNormalize(SPVector3D x) {return SPVector3DNormalize(x);}
SPVector3D wrapSPVector3DProject(SPVector3D x, SPVector3D y) {return SPVector3DProject(x, y);}
SPVector3D wrapSPVector3DReflect(SPVector3D x, SPVector3D y) {return SPVector3DReflect(x, y);}
SPVector3D wrapSPVector3DRotate(SPVector3D vector, SPRotation3D rotation) {return SPVector3DRotate(vector, rotation);}
SPVector3D wrapSPVector3DRotateByQuaternion(SPVector3D vector, simd_quatd quaternion) {return SPVector3DRotateByQuaternion(vector, quaternion);}
SPVector3D wrapSPVector3DScaleBy(SPVector3D vector, double x, double y, double z) {return SPVector3DScaleBy(vector, x, y, z);}
SPVector3D wrapSPVector3DScaleBySize(SPVector3D vector, SPSize3D scale) {return SPVector3DScaleBySize(vector, scale);}
SPVector3D wrapSPVector3DScaleUniform(SPVector3D vector, double scale) {return SPVector3DScaleUniform(vector, scale);}
//void wrapSPAffineTransform3DSetOffset(SPAffineTransform3D *transform, SPVector3D offset) {SPAffineTransform3DSetOffset(transform, offset);}
void wrapSPAffineTransform3DSetTranslation(SPAffineTransform3D *transform, SPVector3D offset) {SPAffineTransform3DSetTranslation(transform, offset);}
//void wrapSPProjectiveTransform3DSetOffset(SPProjectiveTransform3D *transform, SPVector3D offset) {SPProjectiveTransform3DSetOffset(transform, offset);}
void wrapSPProjectiveTransform3DSetTranslation(SPProjectiveTransform3D *transform, SPVector3D offset) {SPProjectiveTransform3DSetTranslation(transform, offset);}
void wrapSPRect3DGetCornerPoints(SPRect3D rect, SPPoint3D points[]) {SPRect3DGetCornerPoints(rect, points);}
void wrapSPRotation3DSetAngle(SPRotation3D *rotation, SPAngle angle) {SPRotation3DSetAngle(rotation, angle);}
void wrapSPRotation3DSetAxis(SPRotation3D *rotation, SPRotationAxis3D axis) {SPRotation3DSetAxis(rotation, axis);}
