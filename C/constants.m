#include <stdio.h> // printf
#include <string.h>
#import "view.h"

#define countof(arrayptr) sizeof(arrayptr) / sizeof(*(arrayptr))

// Expecting global uniqueness because of C enum semantics!
#define SPELL_ENUMS(...)           \
  int32_t codes[] = {__VA_ARGS__}; \
  char *names = #__VA_ARGS__

// NB group by elided prefix; unelided first
SPELL_ENUMS(MTLTriangleFillModeFill, MTLTriangleFillModeLines,

            MTLWindingClockwise, MTLWindingCounterClockwise,

            MTLCullModeNone, MTLCullModeFront, MTLCullModeBack,

            MTLPrimitiveTypePoint, MTLPrimitiveTypeLine, MTLPrimitiveTypeLineStrip, MTLPrimitiveTypeTriangle, MTLPrimitiveTypeTriangleStrip,

            MTLIndexTypeUInt16, MTLIndexTypeUInt32,

            MTLDepthClipModeClip, MTLDepthClipModeClamp,

            MTLLoadActionDontCare, MTLLoadActionLoad, MTLLoadActionClear,
            MTLStoreActionDontCare, MTLStoreActionStore, MTLStoreActionMultisampleResolve, MTLStoreActionStoreAndMultisampleResolve, MTLStoreActionUnknown, MTLStoreActionCustomSampleDepthStore,

            MTLResourceCPUCacheModeDefaultCache,
            MTLResourceCPUCacheModeWriteCombined,

            MTLResourceStorageModeShared, MTLResourceStorageModeManaged, MTLResourceStorageModePrivate, MTLResourceStorageModeMemoryless,

             MTLVertexFormatUChar, MTLVertexFormatUChar2, MTLVertexFormatUChar3, MTLVertexFormatUChar4,
             MTLVertexFormatChar, MTLVertexFormatChar2, MTLVertexFormatChar3, MTLVertexFormatChar4,
             MTLVertexFormatUCharNormalized, MTLVertexFormatUChar2Normalized, MTLVertexFormatUChar3Normalized, MTLVertexFormatUChar4Normalized,
             MTLVertexFormatCharNormalized, MTLVertexFormatChar2Normalized, MTLVertexFormatChar3Normalized, MTLVertexFormatChar4Normalized,
             MTLVertexFormatUShort, MTLVertexFormatUShort2, MTLVertexFormatUShort3, MTLVertexFormatUShort4,
             MTLVertexFormatShort, MTLVertexFormatShort2, MTLVertexFormatShort3, MTLVertexFormatShort4,
             MTLVertexFormatUShortNormalized, MTLVertexFormatUShort2Normalized, MTLVertexFormatUShort3Normalized, MTLVertexFormatUShort4Normalized,
             MTLVertexFormatShortNormalized, MTLVertexFormatShort2Normalized, MTLVertexFormatShort3Normalized, MTLVertexFormatShort4Normalized,
             MTLVertexFormatHalf, MTLVertexFormatHalf2, MTLVertexFormatHalf3, MTLVertexFormatHalf4,
             MTLVertexFormatFloat, MTLVertexFormatFloat2, MTLVertexFormatFloat3, MTLVertexFormatFloat4,
             MTLVertexFormatUInt, MTLVertexFormatUInt2, MTLVertexFormatUInt3, MTLVertexFormatUInt4,
             MTLVertexFormatInt, MTLVertexFormatInt2, MTLVertexFormatInt3, MTLVertexFormatInt4,

            MTLVertexStepFunctionConstant, MTLVertexStepFunctionPerVertex, MTLVertexStepFunctionPerInstance, MTLVertexStepFunctionPerPatch, MTLVertexStepFunctionPerPatchControlPoint,

            MTLCompareFunctionNever, MTLCompareFunctionLess, MTLCompareFunctionEqual, MTLCompareFunctionLessEqual, MTLCompareFunctionGreater, MTLCompareFunctionNotEqual, MTLCompareFunctionGreaterEqual, MTLCompareFunctionAlways,
            
            MTLPixelFormatA8Unorm, MTLPixelFormatBGRA8Unorm,

            MTLBlendFactorZero, MTLBlendFactorOne, MTLBlendFactorSourceAlpha, MTLBlendFactorDestinationAlpha, MTLBlendFactorBlendAlpha,
            );

struct elision {
  char *prefix, *package, *abbrev;
};

struct elision elide[] = {
  {"NS", "cocoagain", "ns"}, // default, no defpackage
  {"MTL", "metal", "mtl"},
};

int main(void) {
  char *cur = names;
  int32_t i = -1, elision = -1;
  BOOL within = NO, def = NO;
  printf(";; Autogenerated do not edit; see constants.m\n");
  for (size_t e = 1; e < countof(elide); e++)
    printf("(defpackage :%s (:nicknames :%s) (:use cl))\n", 
           elide[e].package, elide[e].abbrev); 
  while (*cur) {
    switch (*cur) {
    case ' ':
    case ',':
      if (within && i >= 0 && i < countof(codes)) 
        printf(" %d)\n", codes[i]); // close defconstant paren
      within = NO;
      def = NO;
      cur++;
      continue;
    default:
      if (!within) {
        within = YES;
        i++;
        for (size_t e = 0; e < countof(elide); e++) {
          char *prefix = elide[e].prefix;
          if (!strncmp(cur, prefix, strlen(prefix))) { // match
            cur += strlen(prefix);
            if (e != elision) { // compare with previously set elision
              elision = e;
              printf("(in-package :%s)\n", elide[e].package);
            }
            goto elide_continue;
          }
        }
        if (elision == -1) { // no elision set yet
          elision = 0;
          printf("(in-package :%s)\n", elide[0].package); // default
        }
      }
      if (!def) { 
        printf("(defconstant "); 
        def = YES;
      }
      printf("%c", *cur); // easy to implement, maybe inefficient to run, who cares
      cur++;
    }
  elide_continue:
    continue;
  } 
}
